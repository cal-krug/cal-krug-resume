/* This is attempt at OOCSS (Object-Oriented CSS)
Citations: https://www.keycdn.com/blog/oocss

The basic primary concept is to organize CSS classes and make them into reuseable "modules" (objects)
with "states" (conditions) to apply to elements.
This results in, you guessed it, modularity and DRYer code.

/* Second principle of OOCSS: Separate Container and Content (the first one is covered below). */
/* This means that every class should NOT style elements (such as an <h3>) to be dependent on a containing element
(such as a header or footer). These should be separate and reusable ANYWHERE in the document regardless of
structural context.
For contextual clarity, "content" refers to elements like images, paragraphs, and divs, which are then nestled
into other "container" elements.
Containers can be represented by a structure class. */



/* First principle: Separate Structure and Skin */

/* STRUCTURES - define repeating "invisible" patterns (like width, margins, etc) as reusable STRUCTURES
(I.e. how things are laid out)

Hint: An example of an entire "structure" would be a "btn-small" class, or small button, and all the invisible patterns
would be the contents of that class. I.e., everything that would make a "button" look like a button and that
alone would belong here, like: height, width, margins, overflow, padding, etc..
Class examples: "btn-small", "btn-right" */
/*

/*COLUMN AND ROWS*/
.col {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
}
/* Column with stuff aligned right */

.col-align-right {
    align-items: end;
}
/* Row Displaying list items horizontally */
.row li {
   display: inline-block;
}

/*SPACING*/
/* Removes margin spacing on the left */
.padding-remove-left {
    padding-left: 0em;
}
/* neat margins and padding with 2em */
.space-margin-padding-2em {
    padding: 2em;
    /* top | horizontal | bottom */
    margin: 2em 32px 2em;
}
/* Space for navigation */
.space-nav {
    /* top | horizontal | bottom */
    padding: 0em 1em 0em;
    /* top | horizontal | bottom */
    margin-right: 0em 1em 0em;
}
.space-nav a {
    /* top | horizontal | bottom */
    padding: 0em .5em 0em;
}
/* Removes margin spacing on the left */
.text-align-center {
    text-align: center;
}

/*OVERFLOW*/
/* Handles overflow into a scroll */
.overflow-scroll {
    overflow: scroll;

}



/* SKINS - define repeating visual patterns as reusable SKINS
(I.e. what the layout looks like)

Hint: An example of a skin class will be looked in the "btn" example I provided above. The structure of the
button is already accomplished (i.e., we *made* a button); now we just have to apply a skin to the button.
Keep in mind that this includes ANYTHING visual, like: colors, gradients, visible borders, shadows, etc.
Class examples: "btn-green", "heading-green" */

/*COLOR PALLETE: (Also based loosely off of):
https://www.colourlovers.com/palette/81459/cherry_cream
https://www.colourlovers.com/palette/921815/Cherry_Bomb

"Charcoal" (Burned Grey)
#252525
"Pluto Skin" (Beige, Sandy but Creamy)
#F0D8C0
"Cocoa" (Brown, Warm)
#441c15
"Downfall" (Red, for Redemption)
#901818
"Cranberry" (Purple, Passionate)
#601830
"Fresh Air" (Blue, Airy)
#AEBDFF
*/

/*ANIMATION*/
/* Animation box */
.anim-box {
    width: 1em;
    height: 1em;
    text-align: center;
    color: pink;
    background-color: red;
    position: relative;
    animation-name: anim-box-rainbow;
    animation-duration: 5s;
    /* iterate the animation a thousand times */
    animation-iteration-count: 1000;
}
@keyframes anim-box-rainbow {
    0%   {background-color:red; left:0px; top:0px;}
    25%  {background-color:yellow; left:200px; top:0px;}
    50%  {background-color:blue; left:200px; top:200px;}
    75%  {background-color:green; left:0px; top:200px;}
    100% {background-color:red; left:0px; top:0px;}
}

/*BACKGROUND*/
/* Background attached to viewport */
.bg-attach-viewport {
    background-attachment: scroll;
}
/* Background with a charcoal color, transparency 50 */
.bg-charcoal-trans50 {
    background-color: #25252550;
}

/*COLOR*/
/* Color for search query fields and buttons */
.color-nav {
    background-color: #441c15;
    color: #F0D8C0;
    border: .15em solid #010000;
}
/* Color for  text */
.color-text-body {
    color: #F0D8C0;
}
.color-text-body a {
    color: #AEBDFF;
}
.color-text-body a:hover {
    color: #901818;
}

/*DECORATION*/
/* Removes decoration of links */
.link-decor-remove a {
    text-decoration: none;
}

/*FONTS*/
/* "Crimson Pro" */
.font-crimson-pro {
    font-family: 'Crimson Pro';
    font-size: 20px;
}
/* "Eagle Lake" */
.font-eagle-lake {
    font-family: 'Eagle Lake';
    font-size: 32px;
}

/*IMAGES*/
.img-typical {
    display: inline-flex;
    /* "floats" an image to the left in the case of overlap */
    float: left;
    height: 12em;
    width: 14em;
    margin: 1em;
}

/*SHADOW*/
/* A shadow aura for links */
.shadow-haven {
    color: #F0D8C0;
}
.shadow-haven a:hover {
    color: #F0D8C0;
    /* color | offset-x | offset-y | blur-radius */
    text-shadow: #AEBDFF 1px 0 10px;
}
.shadow-fairy {
    /* color | offset-x | offset-y | blur-radius */
    text-shadow: #f7aeff 1px 0 3px;
}

/*--------------------------------------------*/
/*ELEMENT SELECTORS (Exceptions to the rule)*/
/* Background with a red/purple gradient */
html {
    background: linear-gradient(#901818, #601830);
    background-attachment: fixed;
}